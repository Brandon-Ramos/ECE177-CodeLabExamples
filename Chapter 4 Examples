Q = Question     A = Answer     W = Why

Q   Given the char variable c, write an expression that is true if and only if the value of c is not the space character.
A   c != ' '
W   We are given the char variable c which we want to set not equal to the space character. This make it true for all values except for 
    when c is equal to the space character. The space character is a single character so it has to be in single quotation marks. 
    
    
Q   Write an expression that evaluates to true if and only if the integer variable workedOvertime is true.
A   workedOvertime                   //workedOvertime && 1  would also work
W   For this problem we can assume that the variiable workedOvertime has been assigned some non-zero number. This makes it so 
    workedOvertime always will evaluate to true. Also remember that 1 also represents true, so workedOvertime && (anded) with 1 will
    also evaluate to true.
    
    
Q   Given the variables temperature and humidity, write an expression that evaluates to true if and only if temperature is greater than 
    90 and humidity is less than 10.
A   (temperature > 90) && (humidity < 10)  //A single ampersand (&) also works. The parentheses aren't needed, good practice to use. 
W   All we want to do is set the variable temperature to greater than 90 (temperature > 90) and we want to and it (&&) with the variable
    humiidity less than 10 (humidity < 10).
    
    
Q   Given the variables isFullTime and age, write an expression that evaluates to true is and only if age is less that 19 or isFullTime 
    is true. 
A   (age < 19) || (isFullTime && 1)     //(age < 19) || (isFullTime) will also work
W   The only new element here is the logiical or operator (||). We have to use the logical or operator and not the bitwise or operator 
    (|)because we want both sides of the expression to be evaluated. The bitwise or operator (single |) will not evaluate the second
    argument if the first argument evaluated to true. The logical or operator (||) will evaluate both sides of the expression 
    regardless. Similary, the logical and operator (&&) doesn't evaluate the second argument if the firs is false, bitwise does. 


Q   Write an expression that evaluates to true if the value of the interger variable Prizes is divisible (with no remainder) by the
    integer variable Participants.
A   Prizes % Participants == 0
W   So we want to divide our first variable Prizes by our second variable Participants. We want to use the remainder operator (%) 
    because we want a remainer. The remainder we want is zero so divide the variable Prizes by the variable Participants evaluated to
    ture when the remainder is zero. Use the doubles equals (==) because we do want to make Prizes % Participants equal to zero. 
    
    
Q   Write an expression that evaluates to true if the integer variable x contains an even value and false if it contains an odd value.
A   x % 2 == 0
W   It doesn't matter what value the variable x is assigned, if it is divided by 2 with zero remainder it is going to be even. 


Q   Write an expression using the conditional operator (? :) that compares the value of the variable x to 5 and results in:
    x is x is greater than or equal to 5
    -x if x is less than 5
A   (x >= 5) ? x : -x
W   The conditional operator does three things: The first operand (x >= 5) gets converted to bool, is evaluated, then completed. If the
    firs toperand is true, the second operand is evaluated (x). If the firs toperand is false, the third operand is evaluated (-x).
    
    
Q   Write an expression using the conditional operator (? :) that compares the value of the variables x and y and results in the larger
    of the two.
A   (x > y) ? x : y
W   If the firs operand (x > y) is true, then the second operand (x) is evaluated. If the firs operand is false then the third operand 
    is evaluated. 
    
    
Q   Write a statement that toggles the value of onOffswitch. That is, if onOffswitch is false, its value is changed to true; if 
    onOffswitch is true, its value is changed to false. 
A   onOffswitch =! onOffswitch           //onOffswitch = !onOffswitch also works
W   The =! operator is used to assign the logical inverse of a variable. As in the variable a equals not the variable b (a = !b).


Q   Write aa if statement that assigns true (1) to the variable feaver if the variable temperature is greater than 98.6.
A   if(temperature > 98.8){
        feaver = 1;
    }
W   This is your basic if statement, if the varuable temperature is greater than 98.8 then feaver equals 1. There is no need for curly
    braces or semicolons for this excerise but it's good practice to start using them. 
    
    
Q   Write an if/else statement that compares the value of the variables soldYesterday and soldToday, and based upon that comparison,
    assigns salesTrend the value -1 or 1. -1 represents the case where soldYesterday is greater than soldToday; 1 represents the case
    where soldYesterday is not greater than soldToday.
A   if(soldYesterday > soldToday){
        salesTrend = -1;
    }
    else{ 
        salesTrend = 1;
    }
W   An if-else statement will do two things. First, it will evaluate one group of statements when an expression is true. When and if the
    expression is false, another group of statements are executed.
    
    
Q   Write an if/else statement that adds 1 to the variable minors if the variable age is less than 18, adds 1 to the variable adults if
    age is 18 through 64, and adds 1 to the variable seniors if age is 65 or older.
A   if(age < 18){
        minors += 1;
    }
    else if(age >= 18 && age <= 64){
        adults += 1;
    }
    if(age > 64){
        seniors += 1;
    }
W   A lot of things are coming together for this question. First, start with a basic if statement for adding 1 to the variable minors
    for when age is less than 18. Then go into an else if statement for the second range of values (age is between 18 and 64). The final
    if statement is used to cover all ages above 65. 


Q   Write an if/else statement that compares the double variable pH with 7.0 and makes the following assignments to the int variables
    neutral, base, and acid:
    0, 0, 1 if pH is less than 7
    0, 1, 0 if pH is greater than 7
    1, 0, 0 if pH is equal to 7
A   if(pH < 7.0){
        neutral = 0;
        base = 0;
        acid = 1;
    }
    else if(pH > 7.0){
        neutral = 0;
        base = 1;
        acid = 0;
    }
    if(pH == 7.0){
        neutral = 1;
        base = 0;
        acid = 0;    
    }
W   The setup of this problem is the most confusing and that's what makes it hard. Start with a basic if statement for when the variable
    pH is less than 7.0 (if(pH > 7.0)). Then assign the values 0, 0, and 1 to the int variables neutral, base, and acid respectively. 
    Now create an else if statement for the second range (when pH is greater that 7.0). Assign the respective values to the variables
    neutral, base, and acid. Finish with one last if statement like in the previous problem for the final case (pH is equal to 7.0).
    
    
Q   Write a switch statement that tests the value of the char variable response and performs the following actions:
    if response is y, the message Your request is being processed is printed
    if response is n, the message Thank you anyway for your consideration is printed
    if response is h, the message Sorry, no help is currently available is printed
    for any other value of response, the message Invalid entry; please try again is printed
A   switch(response){
    case 'y':
    printf("Your request is being processed");
    break;
    case 'n':
    printf("Thank you anyway for your consideration");
    break;
    case 'h':
    printf("Sorry, no help is currently available");
    break;
    default:
    printf("Invalid entry; please try again");
    break;
    }
W   A switch statement more clearly represents multi-branch behavior. What the above code would do is execute the first case whose
    constant expression matches the value of the switch expression. It would then run that case's statement and jump to the end. If no
    case matches then the default case's statement would be executed. 
    
    
Q   Given an int variable k that has already been declared, use a for loop to print a single line of 97 asterisks.
A   for(k = 1; k <= 97; k++){
    printf("*");
    }
W   We have to set the variable k equal to 1 and for all time where k is is less than or equal to 97, increment k. Each time this
    process is repeated, print an asterisk.
    
    
Q   Given int variables k and total that have already been declared, use a for loop to compute the sum of the squares of the first 50
    positive integers and store this value in total. 
A   total = 0;
    for(k = 1;k <= 50;k++){
        total += k*k;
    }
W   We have to initialize the variable total equal to zero so we can store values in it. Next we use a for loop to loop for when k is
    is equal to 1, less than or equal to 50, and increment k. You also want to use the += operator to make sure you are adding values 
    to the variable total (the variable total changes). Without += total will always be zero.
    
    
Q   Write a for loop that prints the integers 1 through 40, separated by spaces or new lines. Use only one variable named count.
A   for(count = 1;count <= 40;count++)
    {
    printf("%d\n", count );
    }
W   This is mostly the same setup as when we were printing asterisks except we want to print integers instead. We want to print the 
    integer value of count so we are going to use %d because thate is the standard for printing integers. Then it's just your basic
    printf statement to print the integers of the variable count.
    
    
Q   Write a for loop that computes the following sum: 5+10+15+20+...+485+490+495+500. The sum should be placed in a variable sum that
    has already been declared and initialized to 0. In addition, there is another variable, num that has also been declared. You must
    not use any other variables.
A   for(num = 0; num <= 500; num += 5){
        sum += num;
    }
W   Start with a basic for loop that gives the variable num a range between 0 and 500 and also increments num by 5 (num += 5). So the
    above for loop loops through every 5th value between the range 0 through 500. The sum += num makes sit so the variable sum is equal
    to sum plus the value of num (sum = sum + num). 
    
    
Q   Assume that the int variables i and j have been declared, and that n has been declared and initialized. Write code that causes a 
    "triangle" of asterisks of size n to be output to the screen. Specifically, n lines should be printed out, the first consisting 
    of a single asterisk, the second consisting of two asterisks, the third consisting of three, etc. The last line should consist of
    n asterisks. 
A   for(i = 1; i <= n; i++) { 
        for(j = 1; j <= i; ++j) { 
        printf("*"); 
        } 
        printf("\n"); 
    }
W   The first for loop determines how many rows are to be printed. In this case, we want n rows to be printed. The second for loop 
    determines how many asterisks are to be printed. We want at least one row and one asterisk so both variable, i and j, have to be 
    set to 1. For the firs for loop (number of rows) we want n rows so set the variable i less than or equal to the variable n.
    
    
Q   Assume the int variables i and result, have been declared but not initialized. Write a for loop header -- i.e. something of the 
    form for (  .   .   .   ). When the loop terminates, result should hold the product of the odd numbers between 10 and 20.
A   for(i = 11, result = 1; i < 20; i += 2)
W   Notice we want values between 10 and 20 so set the variable i greater than 11. Next we want the value to be stored in the variable
    result so use the variable result next and set it equal to 1. Next finish the range for i (we are only asked for odd values so 20
    doesnt matter (i < 20)). Again, we only want odd values so counting up from 11 use i += 2 (same as i = i + 2).
    
    
Q   Writr a for loop that adds the integers between lo and hi and stores the result in the variable result. Only use variable: lo, hi,
    i, and result.
A   for(i = lo; i <= hi; i++){
        result += i;
    }
W   Don't let the wording confuse you, between variables lo and hi might as well be between 22 and 41 or and other values. Then just
    set the problem up like you would for any other for loop. Lastly, we want to store the result in the variable result so
    (result += i;).
    
    
Q   Use a while loop to print a single line of 97 asterisks using the variable k.
A   while(k < 97){
        printf("*");
        k++;
    }
W   What the above while loop is saying is: while the variable k is less than 97, print an asterisk, then increment k. The above while
    loop will repeat until the variable k is no longer less than 97. Know that the variable k starts at 0 so exactly 97 asterisks will 
    be prints.
    
    
Q   Use a while loop to print the sum of squares of the first 50 positive integers and store this value in the variable total. 
A   total = 0;
    while(k <= 50){
        total += k + k;
        k++;
    }
W   Set total equal to zero to set it up to store values. Then set up the while loop to loop through all positive integers between 0
    and 50 (while(k <= 50)). Next we want to store these value in the variable total (total += k * k). This multiplies the variable k
    by k (squaring k) then adds that value to total. Total is then assigned this new total. 
