Q = Question     A = Answer     W = Why

Q   Given the char variable c, write an expression that is true if and only if the value of c is not the space character.
A   c != ' '
W   We are given the char variable c which we want to set not equal to the space character. This make it true for all values except for 
    when c is equal to the space character. The space character is a single character so it has to be in single quotation marks. 
    
    
Q   Write an expression that evaluates to true if and only if the integer variable workedOvertime is true.
A   workedOvertime                   //workedOvertime && 1  would also work
W   For this problem we can assume that the variiable workedOvertime has been assigned some non-zero number. This makes it so 
    workedOvertime always will evaluate to true. Also remember that 1 also represents true, so workedOvertime && (anded) with 1 will
    also evaluate to true.
    
    
Q   Given the variables temperature and humidity, write an expression that evaluates to true if and only if temperature is greater than 
    90 and humidity is less than 10.
A   (temperature > 90) && (humidity < 10)  //A single ampersand (&) also works. The parentheses aren't needed, good practice to use. 
W   All we want to do is set the variable temperature to greater than 90 (temperature > 90) and we want to and it (&&) with the variable
    humiidity less than 10 (humidity < 10).
    
    
Q   Given the variables isFullTime and age, write an expression that evaluates to true is and only if age is less that 19 or isFullTime 
    is true. 
A   (age < 19) || (isFullTime && 1)     //(age < 19) || (isFullTime) will also work
W   The only new element here is the logiical or operator (||). We have to use the logical or operator and not the bitwise or operator 
    (|)because we want both sides of the expression to be evaluated. The bitwise or operator (single |) will not evaluate the second
    argument if the first argument evaluated to true. The logical or operator (||) will evaluate both sides of the expression 
    regardless. Similary, the logical and operator (&&) doesn't evaluate the second argument if the firs is false, bitwise does. 


Q   Write an expression that evaluates to true if the value of the interger variable Prizes is divisible (with no remainder) by the
    integer variable Participants.
A   Prizes % Participants == 0
W   So we want to divide our first variable Prizes by our second variable Participants. We want to use the remainder operator (%) 
    because we want a remainer. The remainder we want is zero so divide the variable Prizes by the variable Participants evaluated to
    ture when the remainder is zero. Use the doubles equals (==) because we do want to make Prizes % Participants equal to zero. 
    
    
Q   Write an expression that evaluates to true if the integer variable x contains an even value and false if it contains an odd value.
A   x % 2 == 0
W   It doesn't matter what value the variable x is assigned, if it is divided by 2 with zero remainder it is going to be even. 


Q   Write an expression using the conditional operator (? :) that compares the value of the variable x to 5 and results in:
    x is x is greater than or equal to 5
    -x if x is less than 5
A   (x >= 5) ? x : -x
W   The conditional operator does three things: The first operand (x >= 5) gets converted to bool, is evaluated, then completed. If the
    firs toperand is true, the second operand is evaluated (x). If the firs toperand is false, the third operand is evaluated (-x).
    
    
Q   Write an expression using the conditional operator (? :) that compares the value of the variables x and y and results in the larger
    of the two.
A   (x > y) ? x : y
W   If the firs operand (x > y) is true, then the second operand (x) is evaluated. If the firs operand is false then the third operand 
    is evaluated. 
    
    
Q   Write a statement that toggles the value of onOffswitch. That is, if onOffswitch is false, its value is changed to true; if 
    onOffswitch is true, its value is changed to false. 
A   onOffswitch =! onOffswitch           //onOffswitch = !onOffswitch also works
W   The =! operator is used to assign the logical inverse of a variable. As in the variable a equals not the variable b (a = !b).
